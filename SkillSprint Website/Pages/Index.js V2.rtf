{\rtf1\ansi\ansicpg1252\cocoartf2822
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs24 \cf0 import \{ useState \} from 'react';\
\
export default function Home() \{\
  const [step, setStep] = useState(0);\
  const [answers, setAnswers] = useState(\{\});\
  const [inputValue, setInputValue] = useState('');\
  const [progress, setProgress] = useState([]);\
\
  const questions = [\
    \{ question: 'What business skill do you want to learn?', type: 'text' \},\
    \{ question: 'What is your experience level?', type: 'choice', options: ['Beginner', 'Intermediate', 'Advanced'] \},\
    \{ question: 'How intense should the sprint be?', type: 'choice', options: ['Light', 'Moderate', 'Intense'] \},\
    \{ question: 'Sprint duration?', type: 'choice', options: ['7', '14', '21', '30'] \},\
    \{ question: 'What is your ultimate goal?', type: 'text' \},\
  ];\
\
  const handleAnswer = (question, answer) => \{\
    setAnswers(prev => (\{ ...prev, [question]: answer \}));\
    setInputValue('');\
    setStep(step + 1);\
  \};\
\
  const generateCourse = () => \{\
    const days = parseInt(answers['Sprint duration?']) || 7;\
    const skill = answers['What business skill do you want to learn?'] || 'your skill';\
    return Array.from(\{ length: days \}, (_, i) => `Lesson $\{i + 1\}: Learn $\{skill\}`);\
  \};\
\
  const lessons = generateCourse();\
  const xp = progress.length * 10;\
  const level = Math.floor(xp / 100) + 1;\
\
  return (\
    <main className="min-h-screen bg-black text-white p-8 text-center">\
      <h1 className="text-3xl font-bold mb-4">SkillSprint</h1>\
      \{step < questions.length ? (\
        <div className="max-w-md mx-auto">\
          <p className="mb-4">\{questions[step].question\}</p>\
          \{questions[step].type === 'text' ? (\
            <>\
              <input\
                className="text-black p-2 w-full mb-2"\
                placeholder="Type..."\
                value=\{inputValue\}\
                onChange=\{e => setInputValue(e.target.value)\}\
                onKeyDown=\{e => e.key === 'Enter' && inputValue && handleAnswer(questions[step].question, inputValue)\}\
              />\
              <button onClick=\{() => handleAnswer(questions[step].question, inputValue)\} className="bg-green-700 px-4 py-2 mt-2 rounded">Next</button>\
            </>\
          ) : (\
            questions[step].options.map((opt, idx) => (\
              <button key=\{idx\} onClick=\{() => handleAnswer(questions[step].question, opt)\} className="block bg-gray-700 px-4 py-2 m-2 rounded">\{opt\}</button>\
            ))\
          )\}\
        </div>\
      ) : (\
        <div className="max-w-md mx-auto">\
          <h2 className="text-2xl font-bold mb-2">Your Personalized Sprint</h2>\
          <p className="mb-4">XP: \{xp\} | Level: \{level\}</p>\
          \{lessons.map((lesson, idx) => (\
            <div key=\{idx\} className="mb-3">\
              <p>\{lesson\}</p>\
              \{!progress.includes(idx) && (\
                <button onClick=\{() => setProgress([...progress, idx])\} className="text-sm mt-1 underline">Mark Complete (+10 XP)</button>\
              )\}\
            </div>\
          ))\}\
          <button onClick=\{() => \{ setStep(0); setAnswers(\{\}); setProgress([]); \}\} className="mt-6 bg-green-800 px-4 py-2 rounded">Start Over</button>\
        </div>\
      )\}\
    </main>\
  );\
\}\
}